// This file was generated by counterfeiter
package fake_job_service

import (
	"sync"

	"github.com/craigfurman/woodhouse-ci/chunkedio"
	"github.com/craigfurman/woodhouse-ci/jobs"
	"github.com/craigfurman/woodhouse-ci/web"
)

type FakeJobService struct {
	ListJobsStub        func() ([]jobs.Job, error)
	listJobsMutex       sync.RWMutex
	listJobsArgsForCall []struct{}
	listJobsReturns     struct {
		result1 []jobs.Job
		result2 error
	}
	SaveStub        func(job *jobs.Job) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		job *jobs.Job
	}
	saveReturns struct {
		result1 error
	}
	RunJobStub        func(id string) (int, error)
	runJobMutex       sync.RWMutex
	runJobArgsForCall []struct {
		id string
	}
	runJobReturns struct {
		result1 int
		result2 error
	}
	FindBuildStub        func(jobId string, buildNumber int) (jobs.Build, error)
	findBuildMutex       sync.RWMutex
	findBuildArgsForCall []struct {
		jobId       string
		buildNumber int
	}
	findBuildReturns struct {
		result1 jobs.Build
		result2 error
	}
	StreamStub        func(jobId string, buildNumber int, streamOffset int64) (*chunkedio.ChunkedReader, error)
	streamMutex       sync.RWMutex
	streamArgsForCall []struct {
		jobId        string
		buildNumber  int
		streamOffset int64
	}
	streamReturns struct {
		result1 *chunkedio.ChunkedReader
		result2 error
	}
}

func (fake *FakeJobService) ListJobs() ([]jobs.Job, error) {
	fake.listJobsMutex.Lock()
	fake.listJobsArgsForCall = append(fake.listJobsArgsForCall, struct{}{})
	fake.listJobsMutex.Unlock()
	if fake.ListJobsStub != nil {
		return fake.ListJobsStub()
	} else {
		return fake.listJobsReturns.result1, fake.listJobsReturns.result2
	}
}

func (fake *FakeJobService) ListJobsCallCount() int {
	fake.listJobsMutex.RLock()
	defer fake.listJobsMutex.RUnlock()
	return len(fake.listJobsArgsForCall)
}

func (fake *FakeJobService) ListJobsReturns(result1 []jobs.Job, result2 error) {
	fake.ListJobsStub = nil
	fake.listJobsReturns = struct {
		result1 []jobs.Job
		result2 error
	}{result1, result2}
}

func (fake *FakeJobService) Save(job *jobs.Job) error {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		job *jobs.Job
	}{job})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub(job)
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakeJobService) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeJobService) SaveArgsForCall(i int) *jobs.Job {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.saveArgsForCall[i].job
}

func (fake *FakeJobService) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeJobService) RunJob(id string) (int, error) {
	fake.runJobMutex.Lock()
	fake.runJobArgsForCall = append(fake.runJobArgsForCall, struct {
		id string
	}{id})
	fake.runJobMutex.Unlock()
	if fake.RunJobStub != nil {
		return fake.RunJobStub(id)
	} else {
		return fake.runJobReturns.result1, fake.runJobReturns.result2
	}
}

func (fake *FakeJobService) RunJobCallCount() int {
	fake.runJobMutex.RLock()
	defer fake.runJobMutex.RUnlock()
	return len(fake.runJobArgsForCall)
}

func (fake *FakeJobService) RunJobArgsForCall(i int) string {
	fake.runJobMutex.RLock()
	defer fake.runJobMutex.RUnlock()
	return fake.runJobArgsForCall[i].id
}

func (fake *FakeJobService) RunJobReturns(result1 int, result2 error) {
	fake.RunJobStub = nil
	fake.runJobReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeJobService) FindBuild(jobId string, buildNumber int) (jobs.Build, error) {
	fake.findBuildMutex.Lock()
	fake.findBuildArgsForCall = append(fake.findBuildArgsForCall, struct {
		jobId       string
		buildNumber int
	}{jobId, buildNumber})
	fake.findBuildMutex.Unlock()
	if fake.FindBuildStub != nil {
		return fake.FindBuildStub(jobId, buildNumber)
	} else {
		return fake.findBuildReturns.result1, fake.findBuildReturns.result2
	}
}

func (fake *FakeJobService) FindBuildCallCount() int {
	fake.findBuildMutex.RLock()
	defer fake.findBuildMutex.RUnlock()
	return len(fake.findBuildArgsForCall)
}

func (fake *FakeJobService) FindBuildArgsForCall(i int) (string, int) {
	fake.findBuildMutex.RLock()
	defer fake.findBuildMutex.RUnlock()
	return fake.findBuildArgsForCall[i].jobId, fake.findBuildArgsForCall[i].buildNumber
}

func (fake *FakeJobService) FindBuildReturns(result1 jobs.Build, result2 error) {
	fake.FindBuildStub = nil
	fake.findBuildReturns = struct {
		result1 jobs.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeJobService) Stream(jobId string, buildNumber int, streamOffset int64) (*chunkedio.ChunkedReader, error) {
	fake.streamMutex.Lock()
	fake.streamArgsForCall = append(fake.streamArgsForCall, struct {
		jobId        string
		buildNumber  int
		streamOffset int64
	}{jobId, buildNumber, streamOffset})
	fake.streamMutex.Unlock()
	if fake.StreamStub != nil {
		return fake.StreamStub(jobId, buildNumber, streamOffset)
	} else {
		return fake.streamReturns.result1, fake.streamReturns.result2
	}
}

func (fake *FakeJobService) StreamCallCount() int {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return len(fake.streamArgsForCall)
}

func (fake *FakeJobService) StreamArgsForCall(i int) (string, int, int64) {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return fake.streamArgsForCall[i].jobId, fake.streamArgsForCall[i].buildNumber, fake.streamArgsForCall[i].streamOffset
}

func (fake *FakeJobService) StreamReturns(result1 *chunkedio.ChunkedReader, result2 error) {
	fake.StreamStub = nil
	fake.streamReturns = struct {
		result1 *chunkedio.ChunkedReader
		result2 error
	}{result1, result2}
}

var _ web.JobService = new(FakeJobService)
