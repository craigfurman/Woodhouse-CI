// This file was generated by counterfeiter
package fake_job_runner

import (
	"sync"

	"github.com/craigfurman/woodhouse-ci/jobs"
)

type FakeRunner struct {
	RunStub        func(job jobs.Job) (jobs.RunningJob, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		job jobs.Job
	}
	runReturns struct {
		result1 jobs.RunningJob
		result2 error
	}
}

func (fake *FakeRunner) Run(job jobs.Job) (jobs.RunningJob, error) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		job jobs.Job
	}{job})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(job)
	} else {
		return fake.runReturns.result1, fake.runReturns.result2
	}
}

func (fake *FakeRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeRunner) RunArgsForCall(i int) jobs.Job {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].job
}

func (fake *FakeRunner) RunReturns(result1 jobs.RunningJob, result2 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 jobs.RunningJob
		result2 error
	}{result1, result2}
}

var _ jobs.Runner = new(FakeRunner)
