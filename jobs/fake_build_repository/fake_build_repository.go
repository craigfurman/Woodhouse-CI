// This file was generated by counterfeiter
package fake_build_repository

import (
	"io"
	"sync"

	"github.com/craigfurman/woodhouse-ci/chunkedio"
	"github.com/craigfurman/woodhouse-ci/jobs"
)

type FakeBuildRepository struct {
	CreateStub        func(jobId string) (int, io.WriteCloser, chan uint32, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		jobId string
	}
	createReturns struct {
		result1 int
		result2 io.WriteCloser
		result3 chan uint32
		result4 error
	}
	FindStub        func(jobId string, buildNumber int) (jobs.Build, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		jobId       string
		buildNumber int
	}
	findReturns struct {
		result1 jobs.Build
		result2 error
	}
	StreamStub        func(jobId string, buildNumber int, startAtByte int64) (*chunkedio.ChunkedReader, error)
	streamMutex       sync.RWMutex
	streamArgsForCall []struct {
		jobId       string
		buildNumber int
		startAtByte int64
	}
	streamReturns struct {
		result1 *chunkedio.ChunkedReader
		result2 error
	}
}

func (fake *FakeBuildRepository) Create(jobId string) (int, io.WriteCloser, chan uint32, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		jobId string
	}{jobId})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(jobId)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2, fake.createReturns.result3, fake.createReturns.result4
	}
}

func (fake *FakeBuildRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeBuildRepository) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].jobId
}

func (fake *FakeBuildRepository) CreateReturns(result1 int, result2 io.WriteCloser, result3 chan uint32, result4 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 int
		result2 io.WriteCloser
		result3 chan uint32
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeBuildRepository) Find(jobId string, buildNumber int) (jobs.Build, error) {
	fake.findMutex.Lock()
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		jobId       string
		buildNumber int
	}{jobId, buildNumber})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(jobId, buildNumber)
	} else {
		return fake.findReturns.result1, fake.findReturns.result2
	}
}

func (fake *FakeBuildRepository) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeBuildRepository) FindArgsForCall(i int) (string, int) {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].jobId, fake.findArgsForCall[i].buildNumber
}

func (fake *FakeBuildRepository) FindReturns(result1 jobs.Build, result2 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 jobs.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildRepository) Stream(jobId string, buildNumber int, startAtByte int64) (*chunkedio.ChunkedReader, error) {
	fake.streamMutex.Lock()
	fake.streamArgsForCall = append(fake.streamArgsForCall, struct {
		jobId       string
		buildNumber int
		startAtByte int64
	}{jobId, buildNumber, startAtByte})
	fake.streamMutex.Unlock()
	if fake.StreamStub != nil {
		return fake.StreamStub(jobId, buildNumber, startAtByte)
	} else {
		return fake.streamReturns.result1, fake.streamReturns.result2
	}
}

func (fake *FakeBuildRepository) StreamCallCount() int {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return len(fake.streamArgsForCall)
}

func (fake *FakeBuildRepository) StreamArgsForCall(i int) (string, int, int64) {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return fake.streamArgsForCall[i].jobId, fake.streamArgsForCall[i].buildNumber, fake.streamArgsForCall[i].startAtByte
}

func (fake *FakeBuildRepository) StreamReturns(result1 *chunkedio.ChunkedReader, result2 error) {
	fake.StreamStub = nil
	fake.streamReturns = struct {
		result1 *chunkedio.ChunkedReader
		result2 error
	}{result1, result2}
}

var _ jobs.BuildRepository = new(FakeBuildRepository)
