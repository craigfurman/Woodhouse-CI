// This file was generated by counterfeiter
package fake_vcs_fetcher

import (
	"io"
	"sync"

	"github.com/craigfurman/woodhouse-ci/runner"
)

type FakeVcsFetcher struct {
	FetchStub        func(repository string, outputSink io.Writer) (string, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		repository string
		outputSink io.Writer
	}
	fetchReturns struct {
		result1 string
		result2 error
	}
}

func (fake *FakeVcsFetcher) Fetch(repository string, outputSink io.Writer) (string, error) {
	fake.fetchMutex.Lock()
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		repository string
		outputSink io.Writer
	}{repository, outputSink})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(repository, outputSink)
	} else {
		return fake.fetchReturns.result1, fake.fetchReturns.result2
	}
}

func (fake *FakeVcsFetcher) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeVcsFetcher) FetchArgsForCall(i int) (string, io.Writer) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].repository, fake.fetchArgsForCall[i].outputSink
}

func (fake *FakeVcsFetcher) FetchReturns(result1 string, result2 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

var _ runner.VcsFetcher = new(FakeVcsFetcher)
