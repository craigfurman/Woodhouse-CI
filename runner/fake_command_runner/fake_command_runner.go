// This file was generated by counterfeiter
package fake_command_runner

import (
	"os/exec"
	"sync"

	"github.com/craigfurman/woodhouse-ci/runner"
)

type FakeCommandRunner struct {
	CombinedOutputStub        func(cmd *exec.Cmd) ([]byte, uint32, error)
	combinedOutputMutex       sync.RWMutex
	combinedOutputArgsForCall []struct {
		cmd *exec.Cmd
	}
	combinedOutputReturns struct {
		result1 []byte
		result2 uint32
		result3 error
	}
}

func (fake *FakeCommandRunner) CombinedOutput(cmd *exec.Cmd) ([]byte, uint32, error) {
	fake.combinedOutputMutex.Lock()
	fake.combinedOutputArgsForCall = append(fake.combinedOutputArgsForCall, struct {
		cmd *exec.Cmd
	}{cmd})
	fake.combinedOutputMutex.Unlock()
	if fake.CombinedOutputStub != nil {
		return fake.CombinedOutputStub(cmd)
	} else {
		return fake.combinedOutputReturns.result1, fake.combinedOutputReturns.result2, fake.combinedOutputReturns.result3
	}
}

func (fake *FakeCommandRunner) CombinedOutputCallCount() int {
	fake.combinedOutputMutex.RLock()
	defer fake.combinedOutputMutex.RUnlock()
	return len(fake.combinedOutputArgsForCall)
}

func (fake *FakeCommandRunner) CombinedOutputArgsForCall(i int) *exec.Cmd {
	fake.combinedOutputMutex.RLock()
	defer fake.combinedOutputMutex.RUnlock()
	return fake.combinedOutputArgsForCall[i].cmd
}

func (fake *FakeCommandRunner) CombinedOutputReturns(result1 []byte, result2 uint32, result3 error) {
	fake.CombinedOutputStub = nil
	fake.combinedOutputReturns = struct {
		result1 []byte
		result2 uint32
		result3 error
	}{result1, result2, result3}
}

var _ runner.CommandRunner = new(FakeCommandRunner)
